[color]
	# Colour terminal command output when possible.
	ui = auto
[gist]
	# Open GitHub Gist in browser after submission.
	browse = true
[push]
	# Push to the set upstream branch being tracked by default.
	default = simple
[fetch]
	# Always prune when fetching (and pulling).
	prune = 1
[rerere]
	enabled = true
	autoupdate = true
[core]
	# Exclude everything this file. Used for general exclusions.
	excludesfile = ~/.gitignore
	# Set attributes on files. Used for general diff improvements.
	attributesfile = ~/.gitattributes
	# Don't prompt for commit messages for merge commits.
	mergeoptions = --no-edit
	pager = less -FX
[pager]
	log = /opt/homebrew/opt/git/share/git-core/contrib/diff-highlight/diff-highlight | less -FX
	show = /opt/homebrew/opt/git/share/git-core/contrib/diff-highlight/diff-highlight | less -FX
	diff = /opt/homebrew/opt/git/share/git-core/contrib/diff-highlight/diff-highlight | less -FX
[color "diff-highlight"]
	oldNormal = "white #000066"
	oldHighlight = "ul yellow #990000"
	newNormal = "white #000099"
	newHighlight = "ul yellow #aa0000"
[help]
  # Autocorrect mistyped commands.
	autocorrect = 1
[alias]
	## 'New' Commands
	# Unstage the changes in a given file.
	unstage = reset HEAD --
	# View the current changes in the staging area.
	staged = diff --cached
	# Print the name of the current branch.
	current-branch = symbolic-ref --short HEAD
	# Print the name of the current upstream tracking branch.
	upstream = !git config --get branch.$(git current-branch).remote \
	         || echo origin
	# Fetch all branches and rebase the current branch against
	# upstream/master.
	rebase-against-master = !git fetch --all \
	                      && git rebase $(git upstream)/master
	rebase-against-main   = !git fetch --all \
	                      && git rebase $(git upstream)/main
	# Push the current branch upstream to origin using the same branch
	# name for the remote branch.
	upstream-current-branch = !git push --set-upstream origin \
	                         $(git current-branch)
	# Get the current diff but show differences between characters
	# instead of just the differences between lines.
	word-diff = diff --word-diff
	# Create a new branch by checking out another branch.
	checkout-as-new-branch = checkout -b
	# Show the commit log with a prettier, clearer history.
	pretty-one-line-log = log --graph --oneline --decorate
	# Commit any changes to files, squash them into the last commit
	# and update its date.
	fix-up-previous-commit = !git commit --all --amend \
	                              --reuse-message=HEAD --date=\"$(date)\" #"
	# Checkout the master branch and update it.
	pull-master = !git checkout master && git pull
	# Hard reset branch to the upstream version.
	hard-reset = !git reset --hard $(git upstream)/$(git current-branch)
	# Delete all non-master branches
	delete-merged = !git branch --merged | grep -v 'master' | grep -v '*' | xargs -n 1 git branch -D

	## Shortened 'New' Commands
	up = !git upstream-current-branch
	fa = !git fetch --all
	b = !git checkout-as-new-branch
	# `true` needed as the return status is wrong otherwise.
	l = !git pretty-one-line-log || true
	f = !git fix-up-previous-commit

	## Shortened Existing Commands
	p = pull
	s = status --short --branch
	pf = push --force-with-lease --force-if-includes
#[diff]
#	# Use the macOS graphical three-way merge tool for graphical diffs.
#	tool = opendiff
#	# Use new diff algorithm to make e.g. function diffs look better.
	compactionheuristic = true
[diff "xml"]
	textconv = xmllint --format --recover
#[difftool "opendiff"]
#	# Set the macOS opendiff command name.
#	path = opendiff
#[merge]
#	# Use the macOS graphical three-way merge tool for graphical merges.
#	tool = opendiff
[mergetool]
	# Don't prompt before opening the merge tool.
	prompt = false
	# Don't keep backups of the merge tool inputs.
	keepBackup = false
	# Don't keep the merge tool temporary input/output files.
	keepTemporaries = false
#[mergetool "opendiff"]
#	# Use a script to setup opendiff correctly for Git merges.
#	path = git-mergetool-opendiff
[apply]
	# Cleanup whitespace by default when apply patches.
	whitespace = fix
[rebase]
	# Run `git stash` if needed before a `git rebase`
	autoStash = true
	# Auto-add `--autosquash` to `git rebase`
	autoSquash = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	required = true
	process = git-lfs filter-process
[commit]
	# Show the diff as a comment in the commit message template.
	verbose = true
#	gpgsign = true
[user]
{{ if not .personal -}}
#	signingkey = {{ onepasswordRead "op://employee/qvg464o43aopnwnxyp3xidye4i/public key" .onepasswordAccount | trim }}
	signingkey = {{ onepasswordRead "op://employee/xuywwo5ngvfvtmsfhdtaj5bvcq/credential" .onepasswordAccount | trim }}
{{- end -}}
[branch "master"]
	pushRemote = no_push
[branch "main"]
	pushRemote = no_push
[init]
	defaultBranch = main
#[gpg]
#	format = ssh
[include]
	path = /Users/tom_krouper/.config/dev/gitconfig
	path = ~/.gitconfig-user